#!/nix/store/h3dwyhxyswzr8vkdchiqzdf7s8rlc4if-bash-5.1-p16/bin/bash
set -eu
set -o pipefail

cd $HOME

export PATH="/nix/store/h3dwyhxyswzr8vkdchiqzdf7s8rlc4if-bash-5.1-p16/bin:/nix/store/kgllqqq7gjwxn8ifhkhb321855cskks4-coreutils-9.0/bin:/nix/store/zzpl8z8fd1ryi67xjzhf3if0dfm14p3b-diffutils-3.8/bin:/nix/store/bywndd497xxaxbmg3v95ja06yhsviy71-findutils-4.9.0/bin:/nix/store/2j5aarsvnjbk0d1r00l6nnm1yhknbnjc-gettext-0.21/bin:/nix/store/5g1rndqj79iv86macp0br5qha51qdsf8-gnugrep-3.7/bin:/nix/store/vz1lwsys8xspk9daf32hhxsvg3clpp72-gnused-4.8/bin:/nix/store/gvxrjpvhj08ahs7bymd147sd0rw6ng4r-ncurses-6.3-p20220507/bin${PATH:+:}$PATH"
export TEXTDOMAIN=hm-modules
export TEXTDOMAINDIR=/nix/store/5jzamyj3z8l7ngvz3jpwxwdjymcy71na-hm-modules-messages
source /nix/store/xc42m2j2znv5n2px2fhy0phgraldhlbc-home-manager.sh


#!/usr/bin/env bash

function setupVars() {
    local nixStateDir="${NIX_STATE_DIR:-/nix/var/nix}"
    local profilesPath="$nixStateDir/profiles/per-user/$USER"
    local gcPath="$nixStateDir/gcroots/per-user/$USER"

    declare -gr nixProfilePath="$profilesPath/profile"
    declare -gr genProfilePath="$profilesPath/home-manager"
    declare -gr newGenPath="/nix/store/3jr3m3pcnsfbyfcyykrfnn0hrilf5m15-home-manager-generation";
    declare -gr newGenGcPath="$gcPath/current-home"

    local greatestGenNum
    greatestGenNum=$( \
        nix-env --list-generations --profile "$genProfilePath" \
            | tail -1 \
            | sed -E 's/ *([[:digit:]]+) .*/\1/')

    if [[ -n $greatestGenNum ]] ; then
        declare -gr oldGenNum=$greatestGenNum
        declare -gr newGenNum=$((oldGenNum + 1))
    else
        declare -gr newGenNum=1
    fi

    if [[ -e $profilesPath/home-manager ]] ; then
        oldGenPath="$(readlink -e "$profilesPath/home-manager")"
        declare -gr oldGenPath
    fi

    $VERBOSE_RUN _i "Sanity checking oldGenNum and oldGenPath"
    if [[ -v oldGenNum && ! -v oldGenPath
            || ! -v oldGenNum && -v oldGenPath ]]; then
        _i $'The previous generation number and path are in conflict! These\nmust be either both empty or both set but are now set to\n\n    \'%s\' and \'%s\'\n\nIf you don\'t mind losing previous profile generations then\nthe easiest solution is probably to run\n\n   rm %s/home-manager*\n   rm %s/current-home\n\nand trying home-manager switch again. Good luck!' \
           "${oldGenNum:-}" "${oldGenPath:-}" \
           "$profilesPath" "$gcPath"
        exit 1
    fi
}

if [[ -v VERBOSE ]]; then
    export VERBOSE_ECHO=echo
    export VERBOSE_ARG="--verbose"
    export VERBOSE_RUN=""
else
    export VERBOSE_ECHO=true
    export VERBOSE_ARG=""
    export VERBOSE_RUN=true
fi

_i "Starting Home Manager activation"

# Verify that we can connect to the Nix store and/or daemon. This will
# also create the necessary directories in profiles and gcroots.
$VERBOSE_RUN _i "Sanity checking Nix"
nix-build --expr '{}' --no-out-link

setupVars

if [[ -v DRY_RUN ]] ; then
    _i "This is a dry run"
    export DRY_RUN_CMD=echo
else
    $VERBOSE_RUN _i "This is a live run"
    export DRY_RUN_CMD=""
fi

if [[ -v VERBOSE ]]; then
    _i 'Using Nix version: %s' "$(nix-env --version)"
fi

$VERBOSE_RUN _i "Activation variables:"
if [[ -v oldGenNum ]] ; then
    $VERBOSE_ECHO "  oldGenNum=$oldGenNum"
    $VERBOSE_ECHO "  oldGenPath=$oldGenPath"
else
    $VERBOSE_ECHO "  oldGenNum undefined (first run?)"
    $VERBOSE_ECHO "  oldGenPath undefined (first run?)"
fi
$VERBOSE_ECHO "  newGenPath=$newGenPath"
$VERBOSE_ECHO "  newGenNum=$newGenNum"
$VERBOSE_ECHO "  newGenGcPath=$newGenGcPath"
$VERBOSE_ECHO "  genProfilePath=$genProfilePath"


_iNote "Activating %s" "checkFilesChanged"
function _cmp() {
  if [[ -d $1 && -d $2 ]]; then
    diff -rq "$1" "$2" &> /dev/null
  else
    cmp --quiet "$1" "$2"
  fi
}
declare -A changedFiles
unset -f _cmp


_iNote "Activating %s" "checkLinkTargets"
function checkNewGenCollision() {
  local newGenFiles
  newGenFiles="$(readlink -e "$newGenPath/home-files")"
  find "$newGenFiles" \( -type f -or -type l \) \
      -exec bash /nix/store/dp1c74yak6pizfm466nrz6iys8lanmr5-check "$newGenFiles" {} +
}

checkNewGenCollision || exit 1


_iNote "Activating %s" "writeBoundary"


_iNote "Activating %s" "installPackages"
function nixReplaceProfile() {
  local oldNix="$(command -v nix)"

  nix profile list \
    | { grep 'home-manager-path$' || test $? = 1; } \
    | cut -d ' ' -f 4 \
    | xargs -t $DRY_RUN_CMD nix profile remove $VERBOSE_ARG

  $DRY_RUN_CMD $oldNix profile install $1
}

if [[ -e "$nixProfilePath"/manifest.json ]] ; then
  INSTALL_CMD="nix profile install"
  INSTALL_CMD_ACTUAL="nixReplaceProfile"
  LIST_CMD="nix profile list"
  REMOVE_CMD_SYNTAX='nix profile remove {number | store path}'
else
  INSTALL_CMD="nix-env -i"
  INSTALL_CMD_ACTUAL="$DRY_RUN_CMD nix-env -i"
  LIST_CMD="nix-env -q"
  REMOVE_CMD_SYNTAX='nix-env -e {package name}'
fi

if ! $INSTALL_CMD_ACTUAL /nix/store/ax7g5nsv85zh4ca2mfvqgjad3j3xb1fw-home-manager-path ; then
  echo
  _iError $'Oops, Nix failed to install your new Home Manager profile!\n\nPerhaps there is a conflict with a package that was installed using\n"%s"? Try running\n\n    %s\n\nand if there is a conflicting package you can remove it with\n\n    %s\n\nThen try activating your Home Manager configuration again.' "$INSTALL_CMD" "$LIST_CMD" "$REMOVE_CMD_SYNTAX"
  exit 1
fi
unset -f nixReplaceProfile
unset INSTALL_CMD INSTALL_CMD_ACTUAL LIST_CMD REMOVE_CMD_SYNTAX


_iNote "Activating %s" "linkGeneration"
function linkNewGen() {
  _i "Creating home file links in %s" "$HOME"

  local newGenFiles
  newGenFiles="$(readlink -e "$newGenPath/home-files")"
  find "$newGenFiles" \( -type f -or -type l \) \
    -exec bash /nix/store/z7a1nd59gi6bq1nrqxlz8kv53qaa1lni-link "$newGenFiles" {} +
}

function cleanOldGen() {
  if [[ ! -v oldGenPath || ! -e "$oldGenPath/home-files" ]] ; then
    return
  fi

  _i "Cleaning up orphan links from %s" "$HOME"

  local newGenFiles oldGenFiles
  newGenFiles="$(readlink -e "$newGenPath/home-files")"
  oldGenFiles="$(readlink -e "$oldGenPath/home-files")"

  # Apply the cleanup script on each leaf in the old
  # generation. The find command below will print the
  # relative path of the entry.
  find "$oldGenFiles" '(' -type f -or -type l ')' -printf '%P\0' \
    | xargs -0 bash /nix/store/8md1dbnj2694d6fk05640cvcbwk72p9f-cleanup "$newGenFiles"
}

cleanOldGen

if [[ ! -v oldGenPath || "$oldGenPath" != "$newGenPath" ]] ; then
  _i "Creating profile generation %s" $newGenNum
  if [[ -e "$genProfilePath"/manifest.json ]] ; then
    # Remove all packages from "$genProfilePath"
    # `nix profile remove '.*' --profile "$genProfilePath"` was not working, so here is a workaround:
    nix profile list --profile "$genProfilePath" \
      | cut -d ' ' -f 4 \
      | xargs -t $DRY_RUN_CMD nix profile remove $VERBOSE_ARG --profile "$genProfilePath"
    $DRY_RUN_CMD nix profile install $VERBOSE_ARG --profile "$genProfilePath" "$newGenPath"
  else
    $DRY_RUN_CMD nix-env $VERBOSE_ARG --profile "$genProfilePath" --set "$newGenPath"
  fi

  $DRY_RUN_CMD ln -Tsf $VERBOSE_ARG "$newGenPath" "$newGenGcPath"
else
  _i "No change so reusing latest profile generation %s" "$oldGenNum"
fi

linkNewGen


_iNote "Activating %s" "onFilesChange"


_iNote "Activating %s" "reloadSystemd"
systemdStatus=$(XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/user/$(id -u)} /nix/store/jimz0md5q3l7w1nrgd2j3bi1w9l6da7l-systemd-250.4/bin/systemctl --user is-system-running 2>&1 || true)

if [[ $systemdStatus == 'running' || $systemdStatus == 'degraded' ]]; then
  if [[ $systemdStatus == 'degraded' ]]; then
    warnEcho "The user systemd session is degraded:"
    XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/user/$(id -u)} /nix/store/jimz0md5q3l7w1nrgd2j3bi1w9l6da7l-systemd-250.4/bin/systemctl --user --no-pager --state=failed
    warnEcho "Attempting to reload services anyway..."
  fi

  XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/user/$(id -u)} \
    PATH=/nix/store/jimz0md5q3l7w1nrgd2j3bi1w9l6da7l-systemd-250.4/bin:$PATH \
bash /nix/store/lyvazadz3v9nck27nwcczqi4s9m402ix-systemd-activate.sh "${oldGenPath=}" "$newGenPath"

else
  echo "User systemd daemon not running. Skipping reload."
fi

unset systemdStatus



